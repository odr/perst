module Pers.Database.DML where

import           Data.Proxy          (Proxy (..))
import           Pers.Database.Types

class (TabConstr t) => DML (b :: *) (t::DataDef *)
  where
    -- | Insert the list of values into database.
    -- Should create Insert-statement with parameters
    -- and execute it for all values in list
--    ins ::  Proxy t -> RecordDef t -> SessionMonad b m ()
{-

    -- | In many cases PK should be generated.
    -- There are some possibilities:
    --
    -- * autogenerated PK (Sqlite, MSSQL)
    -- * generated from sequence (Oracle, PostgreSQL(?)) then inserted
    --
    -- In all cases interface is the same.
    -- If we need sequence name (Oracle) we can derive it from table name.
    --
    -- If for backend and table autogeneration of id's is impossible
    -- than empty key-list is returned
    insAuto ::  ( MonadIO m
                , MonadCatch m
                , IsAutoPK rep back kr
                )
                => Proxy '(rep,a) -> [dr] -> SessionMonad back m [kr]
    -- | Simple update by pk. Return list of pk which were updated
    upd ::  ( MonadIO m
            , MonadCatch m
            )
            => Proxy '(rep,a) -> [ar] -> SessionMonad back m [kr]
    -- | Delete values by condition.
    -- Count of deleted records is returned
    del ::  ( MonadIO m
            , MonadCatch m
            )
            => Proxy '(rep,a) -> Cond rep back (RecordDef a) -> SessionMonad back m Int
    selProj ::  ( MonadIO m
                , MonadCatch m
                , ContainNames (RecordDef a) b
                , Names b
                , RowRepDDL rep back (ProjNames (RecordDef a) b) rr
            )
            => Proxy '(rep,a,b) -> Cond rep back (RecordDef a)
            -> SessionMonad back m [rr]
-}
